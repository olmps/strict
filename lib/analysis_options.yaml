# Evaluate the rules using the catalogue: https://dart-lang.github.io/linter/lints/
analyzer:
  # Both of language lints are really impactful throughout the project, and both of these might be rules that you
  # may want to modify to `false` if they are too severe.
  #
  # We think that both of these rules are usually enforced in scenarios where we are manipulating untyped field/data,
  # meaning: the `dynamic` type - this means a very high opportunity to access non-existing properties and have errors
  # like NoSuchMethod thrown in runtime. If there is a need to use dynamic type, it would be done by explicitly
  # declaring such fields as `dynamic`.
  language:
    strict-casts: true
    strict-raw-types: true

  errors:
    # The benefits of being able to inject environment variable are substantial. This should be used with care and
    # only when necessary.
    do_not_use_environment: warning

# The ones that don't have any comments are USUALLY (high emphasis on usually) worth due to standardizing concerns -
# improves readability -, and because the own rules descriptions (in https://dart-lang.github.io/linter/lints/) are
# useful enough (meaning that we agree with its particular point of view).
linter:
  rules:
    - always_declare_return_types
    - always_put_control_body_on_new_line
    - always_put_required_named_parameters_first
    # Most of the times, letting Dart infer is just as readable and, consequently, way less verbose. There are a bunch
    # of cases (like frequently with generics) that we don't need to specify a particular type, but we would still be
    # forced anyways (and more often than not, they are really verbose). Dart design also corroborates with this idea:
    # https://dart.dev/guides/language/effective-dart/design#avoid-type-annotating-initialized-local-variables
    #
    # To make sure that we don't have problems with `dynamic` types floating around, we set the `implicity-dynamic` to
    # `false`, meaning that we have to explicitly type your `dynamic` fields - just for type-safety measures.
    #
    # This rule may be valid if you think that ALWAYS preffixing a field with its type is better for readability.
    # - always_specify_types
    - always_use_package_imports
    - annotate_overrides
    # This lint conflicts directly with both `implicit-dynamic` (set to `false) and `implicit-dynamic-parameter` meaning
    # that in some cases, one would have to explicitly ignore one or another rule and we don't want this inconsistency.
    # - avoid_annotating_with_dynamic
    - avoid_bool_literals_in_conditional_expressions
    # There are certain scenarios where one want to explicitly catch any possible error, and these should be explicitly
    # disabled, as they are way less frequent than catches with `on` clauses.
    - avoid_catches_without_on_clauses
    # Read more why we should use Exceptions to be caught instead of
    # [Errors](https://stackoverflow.com/a/58361954/8558606)
    - avoid_catching_errors
    # While - quoting: 'dart allows functions to exist outside of classes for this very reason', sometimes, we just want
    # to reinforce global namespaces for the sake of clear encapsulation. Also, there are cases where the repeated usage
    # may become cumbersome if we must do something like `import '../myLib' as MyLib` every time, just to create a
    # particular namespace for that class.
    # - avoid_classes_with_only_static_members
    - avoid_double_and_int_checks
    - avoid_dynamic_calls
    - avoid_empty_else
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_escaping_inner_quotes
    - avoid_field_initializers_in_const_classes
    # As we already disable `prefer_final_parameters`, we should enforce its counterpart, which will keep things
    # consistent.
    - avoid_final_parameters
    # Dart uses follows some functional concepts, so there is no clear benefit for not allowing a single independent
    # forEach call.
    # - avoid_function_literals_in_foreach_calls
    - avoid_implementing_value_types
    - avoid_init_to_null
    - avoid_js_rounded_ints
    - avoid_multiple_declarations_per_line
    - avoid_null_checks_in_equality_operators
    - avoid_positional_boolean_parameters
    - avoid_print
    - avoid_private_typedef_functions
    - avoid_redundant_argument_values
    # Good complement on `always_use_package_imports`
    - avoid_relative_lib_imports
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    # Not applicable with NNBD.
    # - avoid_returning_null_for_void
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_shadowing_type_parameters
    - avoid_single_cascade_in_expression_statements
    - avoid_slow_async_io # Read more at: https://dart-lang.github.io/linter/lints/avoid_slow_async_io.html
    # There are a bunch of cases where `.toString()` is useful, like when using on primitives and other native classes,
    # such as `Error` and `Exception`.
    # - avoid_type_to_string
    - avoid_types_as_parameter_names
    - avoid_types_on_closure_parameters
    - avoid_unnecessary_containers
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - avoid_web_libraries_in_flutter
    - await_only_futures
    - camel_case_extensions
    - camel_case_types
    - cancel_subscriptions
    - cascade_invocations
    - cast_nullable_to_non_nullable
    # Not working as inteded but useful. Use when this is solved: https://github.com/dart-lang/linter/issues/1381
    # - close_sinks
    - collection_methods_unrelated_type
    - combinators_ordering
    - comment_references
    - conditional_uri_does_not_exist
    - constant_identifier_names
    - control_flow_in_finally
    - curly_braces_in_flow_control_structures
    - dangling_library_doc_comments
    - depend_on_referenced_packages
    - deprecated_consistency
    - deprecated_member_use_from_same_package
    # TODO: Not sure, as I have never used this before.
    # - diagnostic_describe_all_properties
    - directives_ordering
    # While there are plausible scenarios, such as fire and forget, they are much more unlikely than programming errors.
    - discarded_futures
    - do_not_use_environment
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
    - eol_at_end_of_file
    - exhaustive_cases
    - file_names
    - flutter_style_todos
    - hash_and_equals
    - implementation_imports
    - implicit_call_tearoffs
    # It adds too much boilerplate for very specific scenarios, such as libraries that are exposed to another bunch of
    # plugins or libraries. When used in a "controlled" environment, it'll probably just add more boilerplate code than
    # helping it being explicit "reopen".
    # - implicit_reopen
    - invalid_case_patterns
    - join_return_with_assignment
    - leading_newlines_in_multiline_strings
    - library_annotations
    - library_names
    - library_prefixes
    - library_private_types_in_public_api
    # Possibly one of the most discussed topics in code-styling. We prefer to keep it at 120, due to several reasons.
    # This is a totally biased opinion and all three 80, 100 and 120 line lenghts have good/valid points. Although,
    # when exceeding 120, it becomes really hard to read.
    # - lines_longer_than_80_chars
    - literal_only_boolean_expressions
    - matching_super_parameters
    - missing_whitespace_between_adjacent_strings
    - no_adjacent_strings_in_list
    # There are a lot of scenarios where you want to switch over a particular cases that share something in common, and
    # behave the same for the rest of the enum-like cases.
    # - no_default_cases
    - no_duplicate_case_values
    - no_leading_underscores_for_library_prefixes
    - no_leading_underscores_for_local_identifiers
    - no_literal_bool_comparisons
    - no_logic_in_create_state
    - no_runtimeType_toString
    - no_self_assignments
    - no_wildcard_variable_uses
    - non_constant_identifier_names
    - noop_primitive_operations
    # TODO: Not sure, couldn't quite understand why it's better to type cast to a non-nullable type instead of using
    # the "!" bang operator.
    # - null_check_on_nullable_type_parameter
    - null_closures
    - omit_local_variable_types
    # Avoid defining a one-member abstract class when a simple function will do.
    #
    # This is because there are some contexts where you may want to wrap a dependency to keep function signatures more
    # succint. So, for instance, say that you have a dependency for a particular function, and you require that
    # one-member abstracts should be followed, you will be required to pass it through as an argument.
    #
    # I.e.:
    #
    # WHILE THIS IS PREFERRED:
    # String something(MyDependency dependency) => 'Implementation ' + dependency.getSomethingElse();
    #
    # WE SHOULD ALLOW THIS:
    # abstract class MyDependentClass {
    #   String something();
    # }
    #
    # class MyDependentClassImpl implements MyDependentClass  {
    #   MyDependentClassImpl(this.dependency);
    #   MyDependency dependency;
    #
    #   @override
    #   String something() => 'Implementation ' + dependency.getSomethingElse();
    # }
    # - one_member_abstracts
    - only_throw_errors
    - overridden_fields
    - package_api_docs
    - package_names
    - package_prefixed_library_names
    - parameter_assignments
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    # Probably, more than half of the assert scenarios are pretty self explanatory.
    # - prefer_asserts_with_message
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_contains
    # Contradicts with `prefer_single_quotes`. This is a really biased opinion, but mostly because vscode auto-imports
    # normally come with single quotes, and this is enough of a reason to use it, as there is no other clear distinction
    # between single/double quotes.
    # - prefer_double_quotes
    # We turned this off due to the fact that we don't want to force the use of this arrow-syntax return when we have a
    # multiline return.
    #
    # Created an issue https://github.com/dart-lang/linter/issues/2469 where we briefly discussed the possibility of
    # requiring this only if not multi-line, but it appears that it wouldn't make much sense given other lints.
    #
    # And just like https://dart.dev/guides/language/effective-dart/usage#consider-using--for-simple-members says, it's
    # a CONSIDERATION, so it must be evaluate per case, and not simply whether it's single or multi line.
    # - prefer_expression_function_bodies
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    # Gives a ton of verbosity on function declarations and can be controlled by `parameter_assignments`, which enforces
    # that parameters of functions or methods can't be reassigned.
    # - prefer_final_parameters
    - prefer_for_elements_to_map_fromIterable
    - prefer_foreach
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_iterable_whereType
    - prefer_mixin
    - prefer_null_aware_method_calls
    - prefer_null_aware_operators
    # Contradicts with `always_use_package_imports`. Relative imports can get really messy to read if the codebase
    # is slightly complex, frequently seeing things like: '../../../../../../importedFile.dart'. We prefer a more
    # verbose approach - yet, much more declarative.
    # - prefer_relative_imports
    - prefer_single_quotes
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - prefer_void_to_null
    - provide_deprecation_message
    # There are a ton of self explanatory methods, properties and constructors that would require an extra boilerplate
    # to simply conform to this rule.
    # - public_member_api_docs
    - recursive_getters
    - require_trailing_commas
    - secure_pubspec_urls
    - sized_box_for_whitespace
    - sized_box_shrink_expand
    - slash_for_doc_comments
    - sort_child_properties_last
    - sort_constructors_first
    # While sorting the name of each dependency may be beneficial, grouping related dependencies may also be relevant,
    # so this is completely personal, and I prefer to not add it.
    # - sort_pub_dependencies
    - sort_unnamed_constructors_first
    - test_types_in_equals
    - throw_in_finally
    - tighten_type_of_initializing_formals
    - type_annotate_public_apis
    - type_init_formals
    - type_literal_in_constant_pattern
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    - unnecessary_breaks
    - unnecessary_const
    - unnecessary_constructor_name
    # While var keyword is indeed shorter than final, when we allow this approach as our default behavior, we could
    # eventually create mutable variables where they aren't expected to change - contrariwise to the final approach.
    # - unnecessary_final
    - unnecessary_getters_setters
    - unnecessary_lambdas
    - unnecessary_late
    - unnecessary_library_directive
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_aware_operator_on_extension_on_nullable
    - unnecessary_null_checks
    - unnecessary_null_in_if_null_operators
    - unnecessary_nullable_for_final_variable_declarations
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unnecessary_statements
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - unnecessary_to_list_in_spreads
    - unreachable_from_main
    - unrelated_type_equality_checks
    - unsafe_html
    - use_build_context_synchronously
    - use_colored_box
    - use_decorated_box
    - use_enums
    - use_full_hex_values_for_flutter_colors
    - use_function_type_syntax_for_parameters
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    # While keys can be used for a couple of reasons, like reusing/reordering widgets of the same class, requiring it
    # for all Widgets may not reflect all of the existing Widget's use-cases.
    # Example: when we want to create a Widget that represents a page, which usually will only have one instance
    # throughout the app lifecycle.
    # - use_key_in_widget_constructors
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_raw_strings
    - use_rethrow_when_possible
    - use_setters_to_change_properties
    - use_string_buffers
    - use_string_in_part_of_directives
    - use_super_parameters
    - use_test_throws_matchers
    - use_to_and_as_if_applicable
    - valid_regexps
    - void_checks
